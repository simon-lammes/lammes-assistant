generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int               @id @default(autoincrement())
  firstName                String            @map("first_name")
  lastName                 String            @map("last_name")
  hashedPassword           String            @map("hashed_password")
  username                 String            @unique
  settingsUpdatedTimestamp DateTime?         @map("settings_updated_timestamp")
  exerciseFilters          ExerciseFilter[]  @relation("exerciseFiltersToUsers")
  exercises                Exercise[]        @relation("exercisesToUsers")
  experiences              Experience[]      @relation("experiencesToUsers")
  groupMemberships         GroupMembership[] @relation("groupMembershipsToUsers")
  notes                    Note[]            @relation("notesToUsers")

  @@map("users")
}

model Note {
  id                Int         @id @default(autoincrement())
  title             String
  updatedTimestamp  DateTime    @default(now()) @map("updated_timestamp")
  creatorId         Int         @map("creator_id")
  resolvedTimestamp DateTime?   @map("resolved_timestamp")
  description       String?
  startTimestamp    DateTime?   @default(now()) @map("start_timestamp")
  deadlineTimestamp DateTime?   @map("deadline_timestamp")
  creator           User        @relation("notesToUsers", fields: [creatorId], references: [id])
  noteLabels        NoteLabel[] @relation("noteLabelToNote")

  @@map("notes")
}

model Exercise {
  id                         Int             @id @default(autoincrement())
  versionTimestamp           DateTime        @map("version_timestamp")
  title                      String
  creatorId                  Int             @map("creator_id")
  markedForDeletionTimestamp DateTime?       @map("marked_for_deletion_timestamp")
  languageCode               LanguageCode    @default(en) @map("language_code")
  exerciseType               ExerciseType    @default(standard) @map("exercise_type")
  creator                    User            @relation("exercisesToUsers", fields: [creatorId], references: [id])
  exerciseLabels             ExerciseLabel[] @relation("exercisesToLabels")
  experiences                Experience[]    @relation("exercisesToExperiences")
  groupExercises             GroupExercise[] @relation("exercisesToGroupExercises")

  @@map("exercises")
}

model Experience {
  exerciseId           Int       @map("exercise_id")
  learnerId            Int       @map("learner_id")
  correctStreak        Int       @default(0) @map("correct_streak")
  lastStudiedTimestamp DateTime? @map("last_studied_timestamp")
  suspendedTimestamp   DateTime? @map("suspended_timestamp")
  exercise             Exercise  @relation("exercisesToExperiences", fields: [exerciseId], references: [id])
  learner              User      @relation("experiencesToUsers", fields: [learnerId], references: [id])

  @@id([exerciseId, learnerId])
  @@map("experiences")
}

model ExerciseLabel {
  exerciseId Int      @map("exercise_id")
  labelId    Int      @map("label_id")
  exercise   Exercise @relation("exercisesToLabels", fields: [exerciseId], references: [id])
  label      Label    @relation(fields: [labelId], references: [id])

  @@id([exerciseId, labelId])
  @@map("exercise_labels")
}

model Label {
  id             Int             @id @default(autoincrement())
  title          String          @unique
  exerciseLabels ExerciseLabel[]
  noteLabels     NoteLabel[]     @relation("noteLabelToLabel")

  @@map("labels")
}

model ExerciseFilter {
  id                       Int    @id @default(autoincrement())
  title                    String
  creatorId                Int    @map("creator_id")
  exerciseFilterDefinition Json   @map("exercise_filter_definition")
  creator                  User   @relation("exerciseFiltersToUsers", fields: [creatorId], references: [id])

  @@map("exercise_filter")
}

model NoteLabel {
  noteId  Int   @map("note_id")
  labelId Int   @map("label_id")
  label   Label @relation("noteLabelToLabel", fields: [labelId], references: [id])
  note    Note  @relation("noteLabelToNote", fields: [noteId], references: [id])

  @@id([noteId, labelId])
  @@map("note_labels")
}

model GroupMembership {
  memberId Int             @map("member_id")
  groupId  Int             @map("group_id")
  role     GroupMemberRole @default(owner)
  group    Group           @relation("groupMembershipsToGroups", fields: [groupId], references: [id])
  user     User            @relation("groupMembershipsToUsers", fields: [memberId], references: [id])

  @@id([memberId, groupId])
  @@map("group_memberships")
}

model Group {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  groupExercises   GroupExercise[]   @relation("groupExercisesToGroups")
  groupMemberships GroupMembership[] @relation("groupMembershipsToGroups")

  @@map("groups")
}

model GroupExercise {
  groupId    Int      @map("group_id")
  exerciseId Int      @map("exercise_id")
  exercise   Exercise @relation("exercisesToGroupExercises", fields: [exerciseId], references: [id])
  group      Group    @relation("groupExercisesToGroups", fields: [groupId], references: [id])

  @@id([groupId, exerciseId])
  @@map("group_exercises")
}

enum LanguageCode {
  en
  de

   @@map("language_code_iso_639_1")
}

enum ExerciseType {
  standard
  multiselect
  trueOrFalse @map("true_or_false")
  ordering
  prompt
  directedGraphAssembly @map("directed_graph_assembly")

   @@map("exercise_type")
}

enum GroupMemberRole {
  owner
  admin
  member

   @@map("group_member_role")
}
