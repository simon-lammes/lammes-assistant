### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ApplicationConfiguration {
  """Which types of files is the user allowed to create?"""
  allowedFileTypes: [String!]!

  """
  How many milliseconds should the frontend debounce before saving changes of the user automatically. This behaviour is useful for when we do not want to require the user to press a save button.
  """
  automaticSaveDebounceMillis: Int!

  """The default settings that are used when not specified by the user."""
  defaultSettings: Settings!

  """
  How many milliseconds should the frontend debounce before sending any filter query to the backend.
  """
  filterQueryDebounceMillis: Int!

  """How long the password of new users is required to be"""
  minPasswordLength: Int!
}

input CustomFile {
  name: String!
  value: String!
}

scalar DateTime

input EdgeInput {
  id: String!
  label: String!
  source: String!
  target: String!
}

type Exercise {
  creatorId: Int
  exerciseLabels(after: ExerciseLabelWhereUniqueInput, before: ExerciseLabelWhereUniqueInput, first: Int, last: Int): [ExerciseLabel!]!
  exerciseType: ExerciseType
  id: Int
  languageCode: LanguageCode
  markedForDeletionTimestamp: DateTime
  title: String
  versionTimestamp: DateTime
}

type ExerciseCooldown {
  days: Int!
  hours: Int!
  minutes: Int!
}

input ExerciseCooldownInput {
  days: Int!
  hours: Int!
  minutes: Int!
}

type ExerciseFilter {
  creatorId: Int
  exerciseFilterDefinition: Json
  id: Int
  title: String
}

input ExerciseFilterDefinition {
  creatorIds: [Int!]
  exerciseTypes: [ExerciseType!]
  groupIds: [Int!]
  labels: [String!]
  languageCodes: [LanguageCode!]
  maximumCorrectStreak: Int
}

type ExerciseLabel {
  exerciseId: Int
  label: Label
  labelId: Int
}

input ExerciseLabelExerciseIdLabelIdCompoundUniqueInput {
  exerciseId: Int!
  labelId: Int!
}

input ExerciseLabelWhereUniqueInput {
  exerciseId_labelId: ExerciseLabelExerciseIdLabelIdCompoundUniqueInput
}

"""
Results describing how a learner coped with an exercise. Through the use of an enum we make sure that further characteristics can easily added in the future.
"""
enum ExerciseResult {
  FAILURE
  SUCCESS
}

enum ExerciseType {
  directedGraphAssembly
  mapping
  multiselect
  ordering
  prompt
  standard
  trueOrFalse
}

type Experience {
  correctStreak: Int
  exercise: Exercise
  exerciseId: Int
  lastStudiedTimestamp: DateTime
  learnerId: Int
}

type Group {
  description: String
  groupMemberships(after: GroupMembershipWhereUniqueInput, before: GroupMembershipWhereUniqueInput, first: Int, last: Int): [GroupMembership!]!
  id: Int
  name: String
}

input GroupFilterDefinition {
  groupIds: [Int!]
}

input GroupInput {
  description: String
  name: String!
}

enum GroupMemberRole {
  admin
  member
  owner
}

type GroupMembership {
  groupId: Int
  memberId: Int
  role: GroupMemberRole
  user: User
}

input GroupMembershipMemberIdGroupIdCompoundUniqueInput {
  groupId: Int!
  memberId: Int!
}

input GroupMembershipWhereUniqueInput {
  memberId_groupId: GroupMembershipMemberIdGroupIdCompoundUniqueInput
}

input HydratedExerciseInput {
  assignment: String!
  edges: [EdgeInput!]
  exerciseType: ExerciseType!
  files: [CustomFile!]!
  groupIds: [Int!]
  isStatementCorrect: Boolean
  labels: [String!]!

  """
  Can be omitted for automatic detection. But expect that the automatic detection can fail.
  """
  languageCode: LanguageCode
  nodes: [NodeInput!]
  orderingItems: [String!]
  possibleAnswers: [PossibleAnswer!]
  promptSolutions: [PromptSolution!]
  solution: String!
  sources: [SourceInput!]
  targets: [TargetInput!]
  title: String!
}

scalar Json

type Label {
  id: Int
  title: String
}

"""We use ISO 639-1."""
enum LanguageCode {
  de
  en
}

type Mutation {
  addGroupMemberships(
    addedMemberships: [NewGroupMembership!]!
    id: Int!

    """The role that the added members should have"""
    role: GroupMemberRole!
  ): Group
  createExercise(hydratedExerciseInput: HydratedExerciseInput!): Exercise
  createExerciseFilter(exerciseFilterDefinition: ExerciseFilterDefinition!, title: String!): ExerciseFilter
  createGroup(group: GroupInput!): Group
  createNote(noteInput: NoteInput!): Note
  deleteExerciseFilter(id: Int!): ExerciseFilter
  deleteNote(noteId: Int!): Note
  editGroup(group: GroupInput!, id: Int!): Group
  editGroupMembership(groupId: Int!, memberId: Int!, role: GroupMemberRole!): GroupMembership
  editNote(id: Int!, noteInput: NoteInput!): Note
  login(password: String!, username: String!): String
  register(firstName: String!, lastName: String!, password: String!, username: String!): Registration
  registerExerciseExperience(exerciseCorrectStreakCap: Int, exerciseId: Int!, exerciseResult: ExerciseResult!): Experience

  """
  Removes an exercise and thereby marks it for deletion. It will be deleted when this action is not reverted within a certain amount of time.
  """
  removeExercise(id: Int!): Exercise
  removeGroupMemberships(id: Int!, removedMemberIds: [Int!]!): Group
  reopenNote(noteId: Int!): Note
  resolveNote(noteId: Int!): Note
  restoreExercise(id: Int!): Exercise
  saveSettings(settings: SettingsInput!): User

  """
  Set the user's profile picture and return a signed download link for it.
  """
  setProfilePicture(picture: PictureInput!): String

  """Manually update an experience entity."""
  suspendExperience(exerciseId: Int!): Experience
  updateExercise(hydratedExerciseInput: HydratedExerciseInput!, id: Int!): Exercise
  updateExerciseFilter(exerciseFilterDefinition: ExerciseFilterDefinition!, id: Int!, title: String!): ExerciseFilter
}

input NewGroupMembership {
  memberId: Int!
}

input NodeInput {
  id: String!
  label: String!
}

type Note {
  creator: User
  creatorId: Int
  deadlineTimestamp: DateTime
  description: String
  id: Int
  noteLabels(after: NoteLabelWhereUniqueInput, before: NoteLabelWhereUniqueInput, first: Int, last: Int): [NoteLabel!]!
  resolvedTimestamp: DateTime
  startTimestamp: DateTime
  title: String
  updatedTimestamp: DateTime
}

input NoteFilterDefinition {
  labels: [String!]
  noteStatus: [String!]
}

input NoteInput {
  deadlineTimestamp: String
  description: String
  labels: [String!]
  startTimestamp: String
  title: String
}

type NoteLabel {
  label: Label
  labelId: Int
  noteId: Int
}

input NoteLabelNoteIdLabelIdCompoundUniqueInput {
  labelId: Int!
  noteId: Int!
}

input NoteLabelWhereUniqueInput {
  noteId_labelId: NoteLabelNoteIdLabelIdCompoundUniqueInput
}

input NoteWhereUniqueInput {
  id: Int
}

input PictureInput {
  """The content of the image encoded in base64."""
  content: String!

  """the name of the picture"""
  name: String!

  """the file type of the picture"""
  type: String!
}

"""
For exercise type "multiselect"
"""
input PossibleAnswer {
  correct: Boolean!

  """Explains why an answer is correct or incorrect."""
  explanation: String
  value: String!
}

input PromptSolution {
  """one possible answer to the exercise's assignement"""
  value: String!
}

type Query {
  currentApplicationConfiguration: ApplicationConfiguration
  filteredExercises(exerciseFilter: ExerciseFilterDefinition!): [Exercise]
  filteredGroups(groupFilter: GroupFilterDefinition!): [Group]
  filteredLabels(query: String): [Label]
  filteredUsers(userFilter: UserFilterDefinition!): [User]
  getExerciseDownloadLink(exerciseId: Int!): String

  """Will be null if the user has no settings yet."""
  getSettingsDownloadLink: String

  """Returns the user object that belongs to user making the request."""
  me: User
  myDeferredNotes: [Note] @deprecated(reason: "Deprecated in favor of myFilteredNotes because that endpoint will be more flexible")
  myExerciseFilters: [ExerciseFilter]
  myExercisesThatAreMarkedForDeletion: [Exercise]
  myFilteredNotes(filter: NoteFilterDefinition!): [Note]
  myGroups: [Group]
  myNextExercise(exerciseCooldown: ExerciseCooldownInput!, exerciseFilter: ExerciseFilterDefinition!): Exercise
  myNoteToReview: Note
  myPendingNotes: [Note] @deprecated(reason: "Deprecated in favor of myFilteredNotes because that endpoint will be more flexible")
  myResolvedNotes: [Note] @deprecated(reason: "Deprecated in favor of myFilteredNotes because that endpoint will be more flexible")
  note(id: Int!): Note
}

type Registration {
  jwtToken: String
  user: User
}

type Settings {
  """How load should the application be in general?"""
  applicationVolume: Float
  exerciseCooldown: ExerciseCooldown!

  """If null, the system default will be used."""
  preferredLanguageCode: LanguageCode
  theme: Theme!
}

input SettingsInput {
  """How load should the application be in general?"""
  applicationVolume: Float
  exerciseCooldown: ExerciseCooldownInput!
  exerciseCorrectStreakCap: Int

  """If null, the system default will be used."""
  preferredLanguageCode: LanguageCode
  theme: Theme!
}

input SourceInput {
  explanation: String
  label: String!
  targets: [String!]!
}

input TargetInput {
  id: String!
  label: String!
}

enum Theme {
  dark
  light
  system
}

type User {
  firstName: String
  id: Int
  lastName: String
  notes(after: NoteWhereUniqueInput, before: NoteWhereUniqueInput, first: Int, last: Int): [Note!]!
  profilePictureDownloadLink: String
  settingsUpdatedTimestamp: DateTime
  username: String
}

input UserFilterDefinition {
  query: String
  userIds: [Int!]
}
