### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ApplicationConfiguration {
  """Which types of files is the user allowed to create?"""
  allowedFileTypes: [String!]!

  """
  How many seconds should the frontend debounce before saving changes of the user automatically. This behaviour is useful for when we do not want to require the user to press a save button.
  """
  automaticSaveDebounceMillis: Int!

  """The default settings that are used when not specified by the user."""
  defaultSettings: Settings!

  """How long the password of new users is required to be"""
  minPasswordLength: Int!
}

input CustomFile {
  name: String!
  value: String!
}

scalar DateTime

type Exercise {
  creator: User!
  creatorId: Int!
  exerciseLabels(after: ExerciseLabelWhereUniqueInput, before: ExerciseLabelWhereUniqueInput, first: Int, last: Int): [ExerciseLabel!]!
  id: Int!
  languageCode: LanguageCode!
  markedForDeletionTimestamp: DateTime
  title: String!
  versionTimestamp: DateTime!
}

type ExerciseCooldown {
  days: Int!
  hours: Int!
  minutes: Int!
}

input ExerciseCooldownInput {
  days: Int!
  hours: Int!
  minutes: Int!
}

input ExerciseFilter {
  creatorIds: [Int!]
  labels: [String!]
  languageCodes: [LanguageCode!]
  maximumCorrectStreak: Int
}

input ExerciseIdLabelIdCompoundUniqueInput {
  exerciseId: Int!
  labelId: Int!
}

type ExerciseLabel {
  exerciseId: Int!
  label: Label!
  labelId: Int!
}

input ExerciseLabelWhereUniqueInput {
  exerciseId_labelId: ExerciseIdLabelIdCompoundUniqueInput
}

"""
Results describing how a learner coped with an exercise. Through the use of an enum we make sure that further characteristics can easily added in the future.
"""
enum ExerciseResult {
  FAILURE
  SUCCESS
}

enum ExerciseType {
  multiselect
  ordering
  prompt
  standard
  trueOrFalse
}

type Experience {
  correctStreak: Int!
  exercise: Exercise!
  exerciseId: Int!
  lastStudiedTimestamp: DateTime
  learnerId: Int!
}

input HydratedExerciseInput {
  assignment: String!
  exerciseType: ExerciseType!
  files: [CustomFile!]!
  isStatementCorrect: Boolean
  labels: [String!]!
  languageCode: LanguageCode!
  orderingItems: [String!]
  possibleAnswers: [PossibleAnswer!]
  promptSolutions: [PromptSolution!]
  solution: String!
  title: String!
}

type Label {
  id: Int!
  title: String!
}

"""We use ISO 639-1."""
enum LanguageCode {
  de
  en
}

type Mutation {
  createExercise(hydratedExerciseInput: HydratedExerciseInput!): Exercise
  createNote(description: String, title: String!): Note
  deleteNote(noteId: Int!): Note
  editNote(deadlineTimestamp: String, description: String, id: Int!, startTimestamp: String, title: String): Note
  login(password: String!, username: String!): String
  register(firstName: String!, lastName: String!, password: String!, username: String!): Registration
  registerExerciseExperience(exerciseCorrectStreakCap: Int, exerciseId: Int!, exerciseResult: ExerciseResult!): Experience

  """
  Removes an exercise and thereby marks it for deletion. It will be deleted when this action is not reverted within a certain amount of time.
  """
  removeExercise(id: Int!): Exercise
  reopenNote(noteId: Int!): Note
  resolveNote(noteId: Int!): Note
  restoreExercise(id: Int!): Exercise
  saveSettings(settings: SettingsInput!): User

  """
  Set the user's profile picture and return a signed download link for it.
  """
  setProfilePicture(picture: PictureInput!): String

  """Manually update an experience entity."""
  suspendExperience(exerciseId: Int!): Experience
  updateExercise(hydratedExerciseInput: HydratedExerciseInput!, id: Int!): Exercise
}

type Note {
  creator: User!
  creatorId: Int!
  deadlineTimestamp: DateTime
  description: String
  id: Int!
  resolvedTimestamp: DateTime
  startTimestamp: DateTime
  title: String!
  updatedTimestamp: DateTime!
}

input NoteWhereUniqueInput {
  id: Int
}

input PictureInput {
  """The content of the image encoded in base64."""
  content: String!

  """the name of the picture"""
  name: String!

  """the file type of the picture"""
  type: String!
}

"""
For exercise type "multiselect"
"""
input PossibleAnswer {
  correct: Boolean!

  """Explains why an answer is correct or incorrect."""
  explanation: String
  value: String!
}

input PromptSolution {
  """one possible answer to the exercise's assignement"""
  value: String!
}

type Query {
  currentApplicationConfiguration: ApplicationConfiguration
  filteredExercises(exerciseFilter: ExerciseFilter!): [Exercise]
  filteredLabels(query: String): [Label]
  filteredUsers(query: String): [User]
  getExerciseDownloadLink(exerciseId: Int!): String

  """Will be null if the user has no settings yet."""
  getSettingsDownloadLink: String

  """Returns the user object that belongs to user making the request."""
  me: User
  myDeferredNotes: [Note]
  myExercisesThatAreMarkedForDeletion: [Exercise]
  myNextExercise(exerciseCooldown: ExerciseCooldownInput!, exerciseFilter: ExerciseFilter!): Exercise
  myPendingNotes: [Note]
  myResolvedNotes: [Note]
  note(id: Int!): Note
}

type Registration {
  jwtToken: String
  user: User
}

type Settings {
  exerciseCooldown: ExerciseCooldown!

  """If null, the system default will be used."""
  preferredLanguageCode: LanguageCode
  theme: Theme!
}

input SettingsInput {
  exerciseCooldown: ExerciseCooldownInput!
  exerciseCorrectStreakCap: Int

  """If null, the system default will be used."""
  preferredLanguageCode: LanguageCode
  theme: Theme!
}

enum Theme {
  dark
  light
  system
}

type User {
  firstName: String!
  id: Int!
  lastName: String!
  notes(after: NoteWhereUniqueInput, before: NoteWhereUniqueInput, first: Int, last: Int): [Note!]!
  profilePictureDownloadLink: String
  settingsUpdatedTimestamp: DateTime
  username: String!
}
