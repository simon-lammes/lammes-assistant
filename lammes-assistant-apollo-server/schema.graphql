### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Exercise {
  creator: User!
  creatorId: Int!
  id: Int!
  markedForDeletionTimestamp: DateTime
  title: String!
  versionTimestamp: DateTime!
}

input ExerciseCooldown {
  days: Int!
  hours: Int!
  minutes: Int!
}

"""
Results describing how a learner coped with an exercise. Through the use of an enum we make sure that further characteristics can easily added in the future.
"""
enum ExerciseResult {
  FAILURE
  SUCCESS
}

enum ExerciseType {
  standard
  trueOrFalse
}

type Experience {
  correctStreak: Int!
  exercise: Exercise!
  exerciseId: Int!
  lastStudiedTimestamp: DateTime
  learnerId: Int!
}

type Mutation {
  createExercise(assignment: String!, exerciseType: ExerciseType!, isStatementCorrect: Boolean, solution: String!, title: String!): Exercise
  createNote(description: String, title: String!): Note
  deleteNote(noteId: Int!): Note
  editNote(deadlineTimestamp: String, description: String, id: Int!, startTimestamp: String, title: String): Note
  login(password: String!, username: String!): String
  register(firstName: String!, lastName: String!, password: String!, username: String!): Registration
  registerExerciseExperience(exerciseId: Int!, exerciseResult: ExerciseResult!): Experience

  """
  Removes an exercise and thereby marks it for deletion. It will be deleted when this action is not reverted within a certain amount of time.
  """
  removeExercise(id: Int!): Exercise
  reopenNote(noteId: Int!): Note
  resolveNote(noteId: Int!): Note
  restoreExercise(id: Int!): Exercise
  saveSettings(exerciseCooldown: ExerciseCooldown!): User
  updateExercise(assignment: String!, exerciseType: ExerciseType!, id: Int!, isStatementCorrect: Boolean, solution: String!, title: String!): Exercise
}

type Note {
  creator: User!
  creatorId: Int!
  deadlineTimestamp: DateTime
  description: String
  id: Int!
  resolvedTimestamp: DateTime
  startTimestamp: DateTime
  title: String!
  updatedTimestamp: DateTime!
}

input NoteWhereUniqueInput {
  id: Int
}

type Query {
  getExerciseDownloadLink(exerciseId: Int!): String

  """Will be null if the user has no settings yet."""
  getSettingsDownloadLink: String

  """Returns the user object that belongs to user making the request."""
  me: User
  myDeferredNotes: [Note]
  myExercises: [Exercise]
  myExercisesThatAreMarkedForDeletion: [Exercise]
  myNextExperience(exerciseCooldown: ExerciseCooldown!): Experience
  myPendingNotes: [Note]
  myResolvedNotes: [Note]
  note(id: Int!): Note
  users: [User]
}

type Registration {
  jwtToken: String
  user: User
}

type User {
  firstName: String!
  id: Int!
  lastName: String!
  notes(after: NoteWhereUniqueInput, before: NoteWhereUniqueInput, first: Int, last: Int): [Note!]!
  settingsUpdatedTimestamp: DateTime
  username: String!
}
