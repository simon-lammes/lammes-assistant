### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

"""
"Hydrated" indicates that objects of this type contain information than their corresponding rows in the relational database. Hydrated exercises contain all their necessary data, even binary files that are not stored in a relational database but a file storage like DigitalOcean Spaces. I want to point out that you could store binary data in a relational database but for cost reasons I decided against it. I also want to point out that I purposefully accept the overhead of base64 encoding because it simplifies persistance of that data client-side (in the future).
"""
type HydratedExercise {
  """
  Base encoded file that is used for the back (solution) of the exercise.
  """
  back: String

  """
  Base encoded file that is used for the front (assignment) of the exercise.
  """
  front: String
  title: String
}

type Mutation {
  createExercise(back: Upload!, front: Upload!, title: String!): HydratedExercise
  createNote(description: String, title: String!): Note
  deleteNote(noteId: Int!): Note
  editNote(deadlineTimestamp: String, description: String, id: Int!, startTimestamp: String, title: String): Note
  login(password: String!, username: String!): String
  register(firstName: String!, lastName: String!, password: String!, username: String!): Registration
  reopenNote(noteId: Int!): Note
  resolveNote(noteId: Int!): Note
}

type Note {
  creatorId: Int!
  deadlineTimestamp: DateTime
  description: String
  id: Int!
  resolvedTimestamp: DateTime
  startTimestamp: DateTime
  title: String!
  updatedTimestamp: DateTime!
  user: User!
}

input NoteWhereUniqueInput {
  id: Int
}

type Query {
  myDeferredNotes: [Note]
  myPendingNotes: [Note]
  myResolvedNotes: [Note]
  note(id: Int!): Note
  users: [User]
}

type Registration {
  jwtToken: String
  user: User
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  firstName: String!
  id: Int!
  lastName: String!
  notes(after: NoteWhereUniqueInput, before: NoteWhereUniqueInput, first: Int, last: Int): [Note!]!
  username: String!
}
