import {User, UserDelegate} from "@prisma/client";
import {AuthenticationError} from "apollo-server";
import {environment} from "../environment";
import * as bcrypt from 'bcrypt';
import * as jwt from 'jsonwebtoken';

/**
 * The required input for creating a new user.
 */
export interface SignupInput {
  firstName: string;
  lastName: string;
  username: string;
  password: string;
}

/**
 * The required information for signing in.
 */
export interface SignInInput {
  username: string;
  password: string;
}

/**
 * The payload of every JWT token that is generated by this application.
 */
export interface JwtPayload {
  username: string;
}

export async function signup(user: UserDelegate, {firstName, lastName, username, password}: SignupInput): Promise<User> {
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);
  return user.create({
    data: {
      firstName,
      lastName,
      username,
      hashedPassword
    }
  })
}

export async function login(userDao: UserDelegate, {username, password}: SignInInput): Promise<string> {
  const user = await userDao.findFirst({where: {username}});
  if (!user) {
    throw new AuthenticationError('User with that username does not exist.');
  }
  const hashedPassword = user.hashedPassword;
  const rightPassword = await bcrypt.compare(password, hashedPassword);
  if (!rightPassword) {
    throw new AuthenticationError('Wrong Password');
  }
  return jwt.sign({username} as JwtPayload, environment.SECRET, {expiresIn: '2 days'});
}


export function verifyToken(token: string | undefined): JwtPayload | undefined {
  if (!token) {
    return undefined;
  }
  try {
    // 'Bearer xyz' should become just 'xyz'.
    const bearerToken = token.slice(7);
    return jwt.verify(bearerToken, environment.SECRET) as JwtPayload;
  } catch (e) {
    throw new AuthenticationError('The Authorization Header of your request was set but could not be verified. It might be expired.')
  }
}
