import * as jwt from "jsonwebtoken";
import {environment} from "../environment";

/**
 * The payload of every JWT token that is generated by this application.
 */
export interface JwtPayload {
  userId: number;
}

export function generateJwtToken(userId: number): string {
  return jwt.sign({userId} as JwtPayload, environment.SECRET, {expiresIn: '2 days'});
}

/**
 * Verifies a token and extracts its payload only if the token is valid.
 * Otherwise returns undefined.
 * This method is not responsible for rejecting unauthorized access but just
 * for doing authentication. You should reject unauthorized and unauthenticated requests
 * in the single handlers.
 */
export function verifyToken(token: string | undefined): JwtPayload | undefined {
  if (!token) {
    return undefined;
  }
  try {
    // 'Bearer xyz' should become just 'xyz'.
    const bearerToken = token.slice(7);
    return jwt.verify(bearerToken, environment.SECRET) as JwtPayload;
  } catch (e) {
    // The jwt token is probably expired.
    return undefined;
  }
}
